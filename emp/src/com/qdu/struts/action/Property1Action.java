/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.qdu.struts.action;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.upload.FormFile;

import com.qdu.model.Mytools;
import com.qdu.model.SqlHelper;
import com.qdu.model.StuBO;
import com.qdu.model.propertyBO;
import com.qdu.struts.form.InspectForm;
import com.qdu.struts.form.PropertyForm;
import com.qdu.struts.form.StuForm;

/** 
 * MyEclipse Struts
 * Creation date: 04-25-2015
 * 
 * XDoclet definition:
 * @struts.action path="/property1" name="propertyForm" scope="request"
 */
public class Property1Action extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PropertyForm propertyForm = (PropertyForm) form;// TODO Auto-generated method stub
		String type=request.getParameter("type");
		if(type.equals("left"))
		{
			//System.out.println("type1="+type.equals("left"));
			propertyBO ab=new propertyBO();
			int pageSize=6;
			int pageNow=1;
			String s_pageNow=request.getParameter("pageNow");
			if(s_pageNow!=null)
			{
			pageNow=Integer.parseInt(s_pageNow);
			}
			//System.out.println("type2="+type);
			ArrayList<PropertyForm> al=(ArrayList<PropertyForm>)ab.getPropertyByPage(pageSize, pageNow);
	        int pageCount=ab.getPageCount(pageSize);
			String[] p={pageCount+""};
			request.setAttribute("al", al);
			request.setAttribute("pageCount", p);
		
			
			return mapping.findForward("property1");
		}else if(type.equals("addInfo"))
		{
			
			FormFile formFile=propertyForm.getPhoto();
			String filename=formFile.getFileName();
			System.out.println("filename="+filename);
			
			InputStream is=null;
			OutputStream os=null;
			propertyForm.setImage(filename);
			try {
				is=formFile.getInputStream();
				String keepFilePath=this.getServlet().getServletContext().getRealPath("/images");
				System.out.println("keepFilePath="+keepFilePath+" ");
				Mytools mt=new Mytools();
				String newFileName=mt.getNewFileName(filename);
				propertyForm.setImage2(newFileName);
				os=new FileOutputStream(keepFilePath+"\\"+newFileName);
				int len=0;
				byte []bytes=new byte[1024];
				while((len=is.read(bytes))>0)
				{
					os.write(bytes,0,len);
				}
				
				
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} finally{
				try {
					is.close();
					os.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
			
			
			
			
			
			
			
			
			//System.out.println("type1="+type.equals("left"));
			propertyBO ab=new propertyBO();
			ab.addProperty(propertyForm);
			int pageSize=6;
			int pageNow=1;
			String s_pageNow=request.getParameter("pageNow");
			if(s_pageNow!=null)
			{
			pageNow=Integer.parseInt(s_pageNow);
			}
			//System.out.println("type2="+type);
			ArrayList<PropertyForm> al=(ArrayList<PropertyForm>)ab.getPropertyByPage(pageSize, pageNow);
	        int pageCount=ab.getPageCount(pageSize);
			String[] p={pageCount+""};
			request.setAttribute("al", al);
			request.setAttribute("pageCount", p);
		
			
			return mapping.findForward("property1");
		}else if(type.equals("deleteInfo"))
		{
			//System.out.println("type1="+type.equals("left"));
			String prono=request.getParameter("prono");
			propertyBO ab=new propertyBO();
			ab.deleteProperty(prono);
			int pageSize=6;
			int pageNow=1;
			String s_pageNow=request.getParameter("pageNow");
			if(s_pageNow!=null)
			{
			pageNow=Integer.parseInt(s_pageNow);
			}
			//System.out.println("type2="+type);
			ArrayList<PropertyForm> al=(ArrayList<PropertyForm>)ab.getPropertyByPage(pageSize, pageNow);
	        int pageCount=ab.getPageCount(pageSize);
			String[] p={pageCount+""};
			request.setAttribute("al", al);
			request.setAttribute("pageCount", p);
		
			
			return mapping.findForward("property1");
		}else if(type.equals("updateInfo"))
		{
			propertyBO ab=new propertyBO();
			//sbb.updateStu(stuForm);
			String prono=request.getParameter("prono");
			PropertyForm pf=ab.getPropertyFormByProno(prono);
			request.setAttribute("pf", pf);
			return mapping.findForward("updateProperty");
			
		}else if(type.equals("updateProperty"))
		{			
			
			propertyBO ab=new propertyBO();
			ab.updateProperty(propertyForm);
			PropertyForm pf=ab.getPropertyFormByProno(propertyForm.getProno());
			request.setAttribute("pf", pf);
			return mapping.findForward("updateProperty");
		}else if(type.equals("selectByProname"))
		{
			propertyBO ab=new propertyBO();
			//sbb.updateStu(stuForm);
			String proname=request.getParameter("proname");
			PropertyForm pf=ab.getPropertyFormByProname(proname);
			request.setAttribute("pf", pf);
			return mapping.findForward("updateProperty");
			
		}else if(type.equals("selectImage"))
		{
			String image2=request.getParameter("image2");
			PropertyForm pf=new PropertyForm();
			pf.setImage2(image2);
			request.setAttribute("pf", pf);
			return mapping.findForward("showImage");
		}
		else{
		return null;
		}
		
	}
}