/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.qdu.struts.action;

import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.qdu.model.*;
import com.qdu.struts.form.*;

/** 
 * MyEclipse Struts
 * Creation date: 04-16-2015
 * 
 * XDoclet definition:
 * @struts.action path="/stu" name="stuForm" scope="request"
 */
public class RepaireAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		
		RepaireForm repaireForm = (RepaireForm) form;// TODO Auto-generated method stub
		String type=request.getParameter("type");
		//String type=request.getParameter("left");
		response.setContentType("text/html");
		response.setCharacterEncoding("utf-8");
		 if(type.equals("left"))
			{
			 String base=repaireForm.getCause();
				String con=repaireForm.getRemark();
				String b=request.getParameter("base");
				String c=request.getParameter("con");
				if(b!=null)
				{
					base=b;
				}if(c!=null)
				{
					con=c;
				}	
				repaireBO sbb=new repaireBO();
				//sbb.updateStu(stuForm);
				int pageSize=6;
				int pageNow=1;
				String s_pageNow=request.getParameter("pageNow");
				if(s_pageNow!=null)
				{
				pageNow=Integer.parseInt(s_pageNow);
				}
				ArrayList<RepaireForm> al=sbb.getRepaireFormWithSort(pageSize, pageNow,null,null,null,null,null,null,null);
				int pageCount=sbb.getPageCount(pageSize,null,null,null,null,null,null);
				String[] p={pageCount+"",type,base,con};
				request.setAttribute("al", al);
				request.setAttribute("pageCount", p);
				//request.setAttribute("sf", stuForm);
				return mapping.findForward("repaire");
				
			}else if(type.equals("m_left"))
			{
				UserForm uf=(UserForm)request.getSession().getAttribute("userForm");
				UserForm uf1=new UserForm();
				if(uf==null)
				{
					return mapping.findForward("loginUI");
				}else{
					
					String type1=uf.getType();
					if(type1.equals("manager")){
						userBO ubb=new userBO();
						uf1=ubb.getUserForm(uf.getUserno());
						
						
						//return mapping.findForward("manager");
					}
				 String base=repaireForm.getCause();
					String con=repaireForm.getRemark();
					String b=request.getParameter("base");
					String c=request.getParameter("con");
					if(b!=null)
					{
						base=b;
					}if(c!=null)
					{
						con=c;
					}	
					repaireBO sbb=new repaireBO();
					//sbb.updateStu(stuForm);
					int pageSize=6;
					int pageNow=1;
					String s_pageNow=request.getParameter("pageNow");
					if(s_pageNow!=null)
					{
					pageNow=Integer.parseInt(s_pageNow);
					}
					ArrayList<RepaireForm> al=sbb.getRepaireFormWithSort(pageSize, pageNow,null,null,null,"yno",uf1.getYno(),"buildingno",uf1.getBno());
					int pageCount=sbb.getPageCount(pageSize,null,null,"yno",uf1.getYno(),"buildingno",uf1.getBno());
					if(uf1.getJob().equals("sysmanager"))
					{
						al=sbb.getRepaireFormWithSort(pageSize, pageNow,null,null,null,null,null,null,null);
						pageCount=sbb.getPageCount(pageSize,null,null,null,null,null,null);
					}
					String[] p={pageCount+"",type,base,con};
					request.setAttribute("al", al);
					request.setAttribute("pageCount", p);
					request.setAttribute("uf", uf1);
					return mapping.findForward("m_repaire");
			}
			}
				else if(type.equals("addInfo"))
			{
				repaireBO sbb=new repaireBO();
				//String recordno=request.getParameter("recordno");
				sbb.addRepaire(repaireForm);
				int pageSize=6;
				int pageNow=1;
				String s_pageNow=request.getParameter("pageNow");
				if(s_pageNow!=null)
				{
				pageNow=Integer.parseInt(s_pageNow);
				}
				ArrayList<RepaireForm> al=sbb.getRepaireFormWithSort(pageSize, pageNow, null,null,null,null,null,null,null);
		        int pageCount=sbb.getPageCount(pageSize,null,null,null,null,null,null);
				String[] p={pageCount+""};
				request.setAttribute("al", al);
				request.setAttribute("pageCount", p);
			
				
				return mapping.findForward("repaire");
			}
				else if(type.equals("m_add"))
				{
					repaireBO sbb=new repaireBO();
					//String recordno=request.getParameter("recordno");
					sbb.addRepaire(repaireForm);
					UserForm uf=(UserForm)request.getSession().getAttribute("userForm");
					UserForm uf1=new UserForm();
					if(uf==null)
					{
						return mapping.findForward("loginUI");
					}else{
						
						String type1=uf.getType();
						if(type1.equals("manager")){
							userBO ubb=new userBO();
							uf1=ubb.getUserForm(uf.getUserno());
							
							
							//return mapping.findForward("manager");
						}
					 String base=repaireForm.getCause();
						String con=repaireForm.getRemark();
						String b=request.getParameter("base");
						String c=request.getParameter("con");
						if(b!=null)
						{
							base=b;
						}if(c!=null)
						{
							con=c;
						}	
					//	repaireBO sbb=new repaireBO();
						//sbb.updateStu(stuForm);
						int pageSize=6;
						int pageNow=1;
						String s_pageNow=request.getParameter("pageNow");
						if(s_pageNow!=null)
						{
						pageNow=Integer.parseInt(s_pageNow);
						}
						ArrayList<RepaireForm> al=sbb.getRepaireFormWithSort(pageSize, pageNow,null,null,null,"yno",uf1.getYno(),"buildingno",uf1.getBno());
						int pageCount=sbb.getPageCount(pageSize,null,null,"yno",uf1.getYno(),"buildingno",uf1.getBno());
						if(uf1.getJob().equals("sysmanager"))
						{
							al=sbb.getRepaireFormWithSort(pageSize, pageNow,null,null,null,null,null,null,null);
							pageCount=sbb.getPageCount(pageSize,null,null,null,null,null,null);
						}
						String[] p={pageCount+"",type,base,con};
						request.setAttribute("al", al);
						request.setAttribute("pageCount", p);
						request.setAttribute("uf", uf1);
						return mapping.findForward("m_repaire");
						}
				}else if(type.equals("deleteInfo"))
			{
				repaireBO sbb=new repaireBO();
				String recordno=request.getParameter("recordno");
				sbb.deleteRepaire(recordno);
				int pageSize=6;
				int pageNow=1;
				String s_pageNow=request.getParameter("pageNow");
				if(s_pageNow!=null)
				{
				pageNow=Integer.parseInt(s_pageNow);
				}
				ArrayList<RepaireForm> al=sbb.getRepaireFormWithSort(pageSize, pageNow, null,null,null,null,null,null,null);
		        int pageCount=sbb.getPageCount(pageSize,null,null,null,null,null,null);
				String[] p={pageCount+""};
				request.setAttribute("al", al);
				request.setAttribute("pageCount", p);
			
				
				return mapping.findForward("repaire");
			}else if(type.equals("m_deleteInfo"))
			{
				//System.out.println("well1");
				repaireBO sbb=new repaireBO();
				String recordno=request.getParameter("recordno");
				sbb.deleteRepaire(recordno);
				UserForm uf=(UserForm)request.getSession().getAttribute("userForm");
				UserForm uf1=new UserForm();
				if(uf==null)
				{
					return mapping.findForward("loginUI");
				}else{
					
					String type1=uf.getType();
					if(type1.equals("manager")){
						userBO ubb=new userBO();
						uf1=ubb.getUserForm(uf.getUserno());
						
						
						//return mapping.findForward("manager");
					}
				 String base=repaireForm.getCause();
					String con=repaireForm.getRemark();
					String b=request.getParameter("base");
					String c=request.getParameter("con");
					//System.out.println("well2 base="+base);
					if(b!=null)
					{
						base=b;
					}if(c!=null)
					{
						con=c;
					}	
				//	repaireBO sbb=new repaireBO();
					//sbb.updateStu(stuForm);
					int pageSize=6;
					int pageNow=1;
					String s_pageNow=request.getParameter("pageNow");
					if(s_pageNow!=null)
					{
					pageNow=Integer.parseInt(s_pageNow);
					}
					ArrayList<RepaireForm> al=sbb.getRepaireFormWithSort(pageSize, pageNow,null,null,null,"yno",uf1.getYno(),"buildingno",uf1.getBno());
					int pageCount=sbb.getPageCount(pageSize,null,null,"yno",uf1.getYno(),"buildingno",uf1.getBno());
					if(uf1.getJob().equals("sysmanager"))
					{
						al=sbb.getRepaireFormWithSort(pageSize, pageNow,null,null,null,null,null,null,null);
						pageCount=sbb.getPageCount(pageSize,null,null,null,null,null,null);
					}
					//System.out.println("well3");
					String[] p={pageCount+"",type,base,con};
					request.setAttribute("al", al);
					request.setAttribute("pageCount", p);
					request.setAttribute("uf", uf1);
					return mapping.findForward("m_repaire");
					}
			}else if(type.equals("updateInfo"))
			{
				repaireBO sbb=new repaireBO();
				String recordno=request.getParameter("recordno");
				RepaireForm rf=sbb.getRepaireForm(recordno);
				
				request.setAttribute("rf", rf);
				return mapping.findForward("updateRepaire");
				
			}else if(type.equals("m_updateInfo"))
			{
				repaireBO sbb=new repaireBO();
				String recordno=request.getParameter("recordno");
				RepaireForm rf=sbb.getRepaireForm(recordno);
				//System.out.println("yno="+rf.getYno());
				request.setAttribute("rf", rf);
				return mapping.findForward("m_updateRepaire");
				
			}else if(type.equals("update"))
			{			
				
				repaireBO sbb=new repaireBO();
				if(sbb.updateRepaire(repaireForm))
				{
					
				
				RepaireForm rf=sbb.getRepaireForm(repaireForm.getRecordno());
				request.setAttribute("rf",rf);
				}
				return mapping.findForward("updateRepaire");
			}else if(type.equals("m_updateRepaire"))
			{			
				
				repaireBO sbb=new repaireBO();
				if(sbb.updateRepaire(repaireForm))
				{
					
				
				RepaireForm rf=sbb.getRepaireForm(repaireForm.getRecordno());
				request.setAttribute("rf",rf);
				}
				return mapping.findForward("m_updateRepaire");
			}else if(type.equals("selectByBase"))
			{
				    String base=repaireForm.getCause();
					String con=repaireForm.getRemark();
					String b=request.getParameter("base");
					String c=request.getParameter("con");
					//System.out.println("base1="+base);
					if(b!=null)
					{
						base=b;
					}if(c!=null)
					{
						con=c;
					}	
					repaireBO sbb=new repaireBO();
					//sbb.updateStu(stuForm);
					int pageSize=6;
					int pageNow=1;
					String s_pageNow=request.getParameter("pageNow");
					if(s_pageNow!=null)
					{
					pageNow=Integer.parseInt(s_pageNow);
					}
					ArrayList<RepaireForm> al=sbb.getRepaireFormWithSort(pageSize, pageNow,null,base,con,null,null,null,null);
					int pageCount=sbb.getPageCount(pageSize,base,con,null,null,null,null);
					String[] p={pageCount+"",type,base,con};
					request.setAttribute("al", al);
					request.setAttribute("pageCount", p);
					//request.setAttribute("sf", stuForm);
					return mapping.findForward("repaire");
				
			}else if(type.equals("m_selectByBase"))
				{
				UserForm uf=(UserForm)request.getSession().getAttribute("userForm");
				UserForm uf1=new UserForm();
				if(uf==null)
				{
					return mapping.findForward("loginUI");
				}else{
					
					String type1=uf.getType();
					if(type1.equals("manager")){
						userBO ubb=new userBO();
						uf1=ubb.getUserForm(uf.getUserno());
						
						
						//return mapping.findForward("manager");
					}
				 String base=repaireForm.getCause();
					String con=repaireForm.getRemark();
					String b=request.getParameter("base");
					String c=request.getParameter("con");
					if(b!=null)
					{
						base=b;
					}if(c!=null)
					{
						con=c;
					}	
					repaireBO sbb=new repaireBO();
					//sbb.updateStu(stuForm);
					int pageSize=6;
					int pageNow=1;
					String s_pageNow=request.getParameter("pageNow");
					if(s_pageNow!=null)
					{
					pageNow=Integer.parseInt(s_pageNow);
					}
					ArrayList<RepaireForm> al=sbb.getRepaireFormWithSort(pageSize, pageNow,null,base,con,"yno",uf1.getYno(),"buildingno",uf1.getBno());
					int pageCount=sbb.getPageCount(pageSize,base,con,"yno",uf1.getYno(),"buildingno",uf1.getBno());
					if(uf1.getJob().equals("sysmanager"))
					{
						al=sbb.getRepaireFormWithSort(pageSize, pageNow,null,base,con,null,null,null,null);
						pageCount=sbb.getPageCount(pageSize,base,con,null,null,null,null);
					}
					String[] p={pageCount+"",type,base,con};
					request.setAttribute("al", al);
					request.setAttribute("pageCount", p);
					request.setAttribute("uf", uf1);
					return mapping.findForward("m_repaire");
				}
				}
				
				else{
				
				return null;
			}
		
	}
}